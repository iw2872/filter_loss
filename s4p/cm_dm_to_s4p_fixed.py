#!/usr/bin/env python3
"""
cm_dm_to_s4p_fixed.py

 - my_dm.s2p, my_cm.s2p 를 읽어서 combined.s4p 로 변환
 - 출력 포트 순서: [1+, 1-, 2+, 2-]
 - 출력 포맷: RI (real, imag)
"""

import numpy as np
import re
from math import sqrt

# 🔹 여기서 파일명을 지정하세요
dm_file = "dm.s2p"
cm_file = "cm.s2p"
out_file = "combined.s4p"

def read_touchstone_2p(filename):
    freqs = []
    S_list = []
    z0 = 50.0
    fmt = 'RI'
    with open(filename, 'r') as f:
        for line in f:
            line = line.strip()
            if not line or line.startswith('!'):
                continue
            if line.startswith('#'):
                parts = line[1:].strip().upper().split()
                if 'RI' in parts: fmt = 'RI'
                elif 'MA' in parts: fmt = 'MA'
                elif 'DB' in parts: fmt = 'DB'
                if 'R' in parts:
                    try:
                        r_index = parts.index('R')
                        z0 = float(parts[r_index+1])
                    except Exception:
                        pass
                continue
            toks = re.split(r'\s+', line)
            if len(toks) < 9:
                rest = ''
                while len(toks) < 9:
                    nxt = f.readline()
                    if not nxt: break
                    nxt = nxt.strip()
                    if not nxt or nxt.startswith('!'): continue
                    rest += ' ' + nxt
                    toks = re.split(r'\s+', (line + ' ' + rest).strip())
            if len(toks) < 9:
                raise ValueError(f"Can't parse line in {filename}: {line}")
            freq = float(toks[0])
            nums = [float(x) for x in toks[1:9]]

            def pair_to_complex(a, b, fmt):
                if fmt == 'RI':
                    return complex(a, b)
                elif fmt == 'MA':
                    mag = a
                    ang = np.deg2rad(b)
                    return mag * (np.cos(ang) + 1j*np.sin(ang))
                elif fmt == 'DB':
                    mag = 10**(a/20.0)
                    ang = np.deg2rad(b)
                    return mag * (np.cos(ang) + 1j*np.sin(ang))
                else:
                    raise ValueError("Unknown format")

            S11 = pair_to_complex(nums[0], nums[1], fmt)
            S21 = pair_to_complex(nums[2], nums[3], fmt)
            S12 = pair_to_complex(nums[4], nums[5], fmt)
            S22 = pair_to_complex(nums[6], nums[7], fmt)
            S = np.array([[S11, S12],
                          [S21, S22]], dtype=complex)
            freqs.append(freq)
            S_list.append(S)
    return np.array(freqs), S_list, z0, fmt

def write_touchstone_4p(filename, freqs, S4_list, z0):
    with open(filename, 'w') as f:
        f.write("! Generated by cm_dm_to_s4p_fixed.py\n")
        f.write(f"# Hz S RI R {z0}\n")
        for i, freq in enumerate(freqs):
            S4 = S4_list[i]
            nums = []
            for r in range(4):
                for c in range(4):
                    val = S4[r, c]
                    nums.append(f"{val.real:.12e}")
                    nums.append(f"{val.imag:.12e}")
            line = f"{freq:.6e} " + " ".join(nums) + "\n"
            f.write(line)

def main():
    freqs_dm, Sdm_list, z0_dm, _ = read_touchstone_2p(dm_file)
    freqs_cm, Scm_list, z0_cm, _ = read_touchstone_2p(cm_file)

    if not np.allclose(freqs_dm, freqs_cm):
        raise ValueError("Frequency points in DM and CM files do not match.")

    freqs = freqs_dm
    z0 = z0_dm

    s = 1.0 / sqrt(2.0)
    T = s * np.array([
        [1, 0,  1, 0],
        [1, 0, -1, 0],
        [0, 1,  0, 1],
        [0, 1,  0, -1],
    ], dtype=complex)
    Tinv = np.linalg.inv(T)

    S4_list = []
    for Sdm, Scm in zip(Sdm_list, Scm_list):
        S_mm = np.zeros((4,4), dtype=complex)
        S_mm[0:2, 0:2] = Sdm
        S_mm[2:4, 2:4] = Scm
        S_se = T @ S_mm @ Tinv
        S4_list.append(S_se)

    write_touchstone_4p(out_file, freqs, S4_list, z0)
    print(f"✅ {out_file} 생성 완료 ({len(freqs)} points, z0={z0})")

if __name__ == "__main__":
    main()
